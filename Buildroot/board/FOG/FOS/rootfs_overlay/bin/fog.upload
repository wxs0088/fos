#!/bin/bash
. /usr/share/fog/lib/funcs.sh
. /bin/fog.checkin
. /bin/fog.mount
. /bin/fog.checkmount
. /bin/fog.checkmountdrivesize
. /bin/fog.checkimgvar
imagePath="/images/$macWinSafe"
parts=""
part=""
disks=""
disk=""
hd=""
echo " * Preparing to send image file to server"
msg="准备将镜像文件发送到服务器"
msg_val="T"
callBackLog $msg_val $msg
percent="$pct"
[[ $pct -lt 5 || $pct -ge 100 ]] && percent=5
fog.statusreporter "$mac" "$web" & disown
statusReporter="$!"
prepareUploadLocation "$imagePath"
echo " * Using Image: $img"
msg="使用镜像: $img"
msg_val="T"
callBackLog $msg_val $msg
# resizable image type
#  discover windows partitions
#  remove pagefile and hibernate file
#  validate XP partition location
#  save original partition table
#  save MBR
#  shrink filesystems and partitions
#  save GRUB
#  save shrunken partition table
#  clone filesystems
#  restore original MBR and partition table
#  expand filesystems
beginUpload() {
    case $imgType in
        [Nn])
            validResizeOS
            runPartprobe "$hd"
            parts=""
            getPartitions "$hd"
            [[ ${#parts} -lt 1 ]] && handleError "No partitions found ($0)\n   Args Passed: $*"
            [[ $osid == @([1-2]|[4-7]|9) ]] && win7partcnt=$(echo $parts | wc -w)
            msg_en="Checking for fixed partitions"
            msg="检查固定分区"
            dots $msg_en
            part_number=0
            for part in $parts; do
                isBitlockedPartition "$part"
                fsTypeSetting "$part"
                getPartitionNumber "$part"
                case $fstype in
                    ntfs|extfs|btrfs|f2fs|xfs)
                        continue
                        ;;
                    *)
                        fixed_size_partitions="$fixed_size_partitions:$part_number"
                        ;;
                esac
            done
            msg_val="Done"
            echo "$msg_val"
            callBackLog $msg_val $msg
            debugPause
            msg_en="Getting Windows/Linux Partition Count"
            msg="获取 Windows/Linux 分区数"
            dots $msg_en
            countPartTypes "$hd" "ntfs" "ntfscnt"
            countPartTypes "$hd" "extfs" "extfscnt"
            countPartTypes "$hd" "btrfs" "btrfscnt"
            countPartTypes "$hd" "f2fs" "f2fscnt"
            countPartTypes "$hd" "xfs" "xfscnt"
            countPartTypes "$hd" "*" "partscnt"
            if [[ $ntfscnt -eq 0 && $extfscnt -eq 0 && $btrfscnt -eq 0 && $f2fscnt -eq 0 && $xfscnt -eq 0 ]]; then
                msg_val="Failed"
                echo "$msg_val"
                callBackLog $msg_val $msg
                debugPause
                handleError "No resizable partitions found ($0)\n   Args Passed: $*"
            fi
            msg_val="Done"
            echo "$msg_val"
            callBackLog $msg_val $msg
            debugPause
            echo " * NTFS Partition count of: $ntfscnt"
            msg="NTFS 分区数量: $ntfscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            echo " * EXTFS Partition count of: $extfscnt"
            msg="EXTFS 分区数量: $extfscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            echo " * BTRFS Partition count of: $btrfscnt"
            msg="BTRFS 分区数量: $btrfscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            echo " * F2FS Partition count of: $f2fscnt"
            msg="F2FS 分区数量: $f2fscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            echo " * XFS Partition count of: $xfscnt"
            msg="XFS 分区数量: $xfscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            echo " * Total Partition count of: $partscnt"
            msg="分区总数: $partscnt"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            case $osid in
                [4-7]|9|50|51)
                    echo " * Setting up any additional fixed parts"
                    msg="设置任何额外的固定部件"
                    msg_val="T"
                    callBackLog $msg_val $msg
                    part_number=0
                    for part in $parts; do
                        getPartitionNumber "$part"
                        fsTypeSetting "$part"
                        [[ $fstype != ntfs ]] && continue
                        msg_en="Mounting partition ($part)"
                        msg="挂载分区 ($part)"
                        dots $msg_en
                        if [[ ! -d /bcdstore ]]; then
                            mkdir -p /bcdstore >/dev/null 2>&1
                            case $? in
                                0)
                                    ;;
                                *)
                                    msg_val="Failed"
                                    echo "$msg_val"
                                    callBackLog $msg_val $msg
                                    debugPause
                                    handleError " * Could not create mount location ($0->${FUNCNAME[0]})\n    Args Passed: $*"
                                    ;;
                            esac
                        fi
                        ntfs-3g -o remove_hiberfile,rw $part /bcdstore >/tmp/ntfs-mount-output 2>&1
                        case $? in
                            0)
                                msg_val="Done"
                                echo "$msg_val"
                                debugPause
                                ;;
                            *)
                                msg_val="Failed"
                                echo "$msg_val"
                                callBackLog $msg_val $msg
                                debugPause
                                handleError " * Could not mount $part ($0->${FUNCNAME[0]})\n    Args Passed: $*\n    Reason: $(cat /tmp/ntfs-mount-output | tr -d \\0)"
                                ;;
                        esac
                        callBackLog $msg_val $msg
                        umount /bcdstore >/dev/null 2>&1
                        if [[ $partscnt -gt 1 ]]; then
                                flock $hd parted -s $hd print | grep "^ *${part_number} " | grep -q "boot\|msftres\|hidden"
                                if [[ $? -eq 0 ]]; then
                                        echo " * New fixed partition for ($part) added."
                                        msg="新的固定分区 ($part) 添加."
                                        msg_val="T"
                                        callBackLog $msg_val $msg
                                        fixed_size_partitions="$fixed_size_partitions:$part_number"
                                fi
                        fi
                    done
                    ;;
            esac
            # All:
            #  save the list of fixed size partitions
            fixed_size_partitions=$(echo $fixed_size_partitions | tr ':' '\n' | grep -v "^$" | sort -n | uniq | tr '\n' ':' | sed 's/:$//g')
            echo "$fixed_size_partitions" > "$imagePath/d1.fixed_size_partitions"
            # Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
            #  Save unmodified partition table for download use
            #  Start filesytem type record
            msg_en="Saving original partition table"
            msg="保存原始分区表"
            dots $msg_en
            saveOriginalPartitions "$hd" "$imagePath" 1 $msg
            swapuuidfilename=""
            swapUUIDFileName "$imagePath" 1
            echo -n "" > "$imagePath/d1.original.fstypes"
            echo -n "" > $swapuuidfilename
            msg_val="Done"
            echo "$msg_val"
            callBackLog $msg_val $msg
            debugPause
            echo " * Shrinking Partitions on disk"
            msg="缩小磁盘分区"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            for part in $parts; do
                clearMountedDevices "$part"
                removePageFile "$part"
                shrinkPartition "$part" "$imagePath/d1.original.fstypes" "$fixed_size_partitions"
            done
            local hasgpt=0
            hasGPT "$hd"
            if [[ $hasgpt -eq 1 ]]; then
                echo " * Moving Partitions on disk $hd"
                msg="在 $hd 磁盘上移动分区"
                msg_val="T"
                callBackLog $msg_val $msg
                debugPause
                saveSfdiskPartitions "$hd" "$imagePath/d1.shrunken.partitions"
                prevPart=""
                for part in $parts; do
                    movePartition "$part" "$prevPart"
                    prevPart="$part"
                done
            fi
            echo " * Saving shrunken partition table"
            msg="保存缩小的分区表"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            sfdiskminimumpartitionfilename=""
            sfdiskMinimumPartitionFileName "$imagePath" 1
            savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType" "$sfdiskminimumpartitionfilename"
            if [[ $hasgpt -eq 1 ]]; then
                echo " * Moving Partitions back on disk $hd"
                msg="在 $hd 磁盘上移动分区"
                msg_val="T"
                callBackLog $msg_val $msg
                debugPause
                applySfdiskPartitions "$hd" "$imagePath/d1.shrunken.partitions"
            fi
            echo " * Processing Hard Disk: $hd"
            msg="处理硬盘: $hd"
            msg_val="T"
            callBackLog $msg_val $msg
            for part in $parts; do
                savePartition "$part" 1 "$imagePath" "$imgPartitionType"
            done
            msg_en="Restoring Original Partition Layout"
            msg="恢复原始分区布局"
            dots $msg_en
            restoreOriginalPartitions "$hd" "$imagePath" 1
            runPartprobe "$hd"
            msg_val="Done"
            echo "$msg_val"
            callBackLog $msg_val $msg
            debugPause
            [[ $osid -eq 2 ]] && correctVistaMBR "$hd"
            getPartitions "$hd"
            for part in $parts; do
                expandPartition "$part" "$fixed_size_partitions"
            done
            ;;
        mps)
            parts=""
            getPartitions "$hd"
            [[ ${#parts} -lt 1 ]] && handleError "No partitions found ($0)\n   Args Passed: $*"
            echo " * Processing Hard Disk: $hd"
            msg="处理硬盘: $hd"
            msg_val="T"
            callBackLog $msg_val $msg
            debugPause
            savePartitionTablesAndBootLoaders "$hd" 1 "$imagePath" "$osid" "$imgPartitionType"
            getPartitions "$hd"
            for part in $parts; do
                isBitlockedPartition "$part"
                savePartition "$part" 1 "$imagePath" "$imgPartitionType"
            done
            ;;
        mpa)
            disk_number=1
            for disk in $disks; do
                [[ $disk =~ mmcblk[0-9]+boot[0-9]+ ]] && continue
                parts=""
                getPartitions "$disk"
                [[ ${#parts} -lt 1 ]] && continue
                debugPause
                echo " * Processing Hard Disk: $disk"
                msg="处理硬盘: $disk"
                msg_val="T"
                callBackLog $msg_val $msg
                debugPause
                echo " * Saving disk size, partition table and boot loader information"
                msg="保存磁盘大小、分区表和引导加载程序信息"
                msg_val="T"
                callBackLog $msg_val $msg
                debugPause
                echo -n "${disk_number}:" > ${imagePath}/d${disk_number}.size
                blockdev --getsize64 $disk >> ${imagePath}/d${disk_number}.size
                savePartitionTablesAndBootLoaders "$disk" "$disk_number" "$imagePath" "$osid" "$imgPartitionType"
                runPartprobe "$disk"
                getPartitions "$disk"
                for part in $parts; do
                    isBitlockedPartition "$part"
                    savePartition "$part" "$disk_number" "$imagePath" "$imgPartitionType"
                done
                echo " * Disk $disk complete"
                msg="磁盘 $disk 完成"
                msg_val="T"
                callBackLog $msg_val $msg
                let disk_number+=1
            done
            ;;
        dd)
            imgpart="$imagePath/$img"
            mkfifo /tmp/pigz1 >/dev/null 2>&1
            uploadFormat "/tmp/pigz1" "$imgpart"
            partclone.imager -c -s "$hd" -O /tmp/pigz1 -N -f 1 -a0
            rm /tmp/pigz1 >/dev/null 2>&1
            clearScreen
            ;;
    esac
}
findHDDInfo
echo " * Now Upp will attempt to capture the image"
msg="现在 Upp 将尝试捕获镜像"
msg_val="T"
callBackLog $msg_val $msg
debugPause
beginUpload
completeTasking
