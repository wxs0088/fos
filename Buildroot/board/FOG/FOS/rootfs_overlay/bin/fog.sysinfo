#!/bin/bash
. /usr/share/fog/lib/funcs.sh
for arg in $(cat /proc/cmdline | tr -d \\0); do
    case $arg in
        initsh)
            ash -i
            ;;
    esac
done
clearScreen
displayBanner
mac=$(getMACAddresses)
oPS3=$PS3
PS3="Please enter your choice: "
choices="Network Information\nPartition Information\nCheck FOG Compatibility\nPing a Host\nDisplay MAC Address\nShow DMI Information"
case $isdebug in
    [Yy][Ee][Ss]|[Yy])
        choices="Quit\n$choices"
        ;;
    *)
        choices="Reboot\n$choices"
        ;;
esac
oIFS=$IFS
IFS=$'\n'
choices=$(echo -e $choices)
wait_enter() {
    echo -e "\n\n\n"
    echo " * Press [Enter] to continue"
    read -s tmp
    echo -e "\n\n\n"
}
while :; do
    echo -e "\n\n\n"
    select choice in $choices; do
        case $REPLY in
            1)
                case $isdebug in
                    [Yy][Ee][Ss]|[Yy])
                        exit 0
                        ;;
                    *)
                        reboot -f
                        ;;
                esac
                ;;
            2)
                clearScreen
                echo "   ==================================================="
                echo "   =                Network Information              ="
                echo "   ==================================================="
                ip addr 2>/dev/null
                echo "   ==================================================="
                echo "   =                  DNS Information                ="
                echo "   ==================================================="
                cat /etc/resolv.conf 2>/dev/null
                wait_enter
                ;;
            3)
                clearScreen
                echo "   ==================================================="
                echo "   =             Partition Information               ="
                echo "   ==================================================="
                parted --list 2>/dev/null
                wait_enter
                ;;
            4)
                clearScreen
                echo "   ==================================================="
                echo "   =              FOG Compatibility Test             ="
                echo "   ==================================================="
                tmpDisk=$(parted --list 2>/dev/null | grep "Disk")
                tmpNic=$(ip addr | grep "link/ether")
                [[ -n $tmpDisk ]] && blHddOk="Pass" || blHddOk="Fail"
                [[ -n $tmpNic ]] && blNicOk="Pass" || blNicOk="Fail"
                [[ $blNicOk == Pass && $blHddOk == Pass ]] && tmpstr="Computer appears to be compatible with FOG!" || tmpstr="Computer is NOT compatibile with FOG!"
                echo "$tmpstr"
                echo "   ==================================================="
                echo "   =                      Results                    ="
                echo "   ==================================================="
                echo "   = Network..................................[$blNicOk] ="
                echo "   = Disk.....................................[$blHddOk] ="
                echo "   ==================================================="
                if [[ $blNicOk == Fail || $blHddOk == Fail ]]; then
                    echo "   ###################################################"
                    echo "   # Try using a newer kernel that may be compatible #"
                    echo "   # with this device.                               #"
                    echo "   #                                                 #"
                    echo "   # New kernels can be downloaded from the GUI.     #"
                    echo "   # From the menu select:                           #"
                    echo "   # FOG Configuration->                             #"
                    echo "   #     Kernel Update                               #"
                    echo "   #                                                 #"
                    echo "   # Below you is some valuable information to post  #"
                    echo "   # to the forums to get more help if needed!       #"
                    echo "   ###################################################"
                    lspci -nn | grep Ethernet
                    echo "   ###################################################"
                    lsblk
                    echo "   ###################################################"
                fi
                wait_enter
                ;;
            5)
                clearScreen
                echo "   ==================================================="
                echo "   =                   Ping a Host                   ="
                echo "   ==================================================="
                regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
                while [[ -z $phost ]]; do
                    echo -n " * Enter host to ping: "
                    read phost
                    phost=$(echo $phost)
                    if [[ -z $phost || $phost =~ $regex ]]; then
                        phost=""
                        echo " * Invalid Entry, try again!"
                    fi
                done
                ping -c 4 $phost
                unset phost
                wait_enter
                ;;
            6)
                clearScreen
                echo "   ==================================================="
                echo "   =               System MAC Address'               ="
                echo "   ==================================================="
                echo $mac
                wait_enter
                ;;
            7)
                clearScreen
                test="bios-vendor bios-version bios-release-date system-manufacturer system-product-name system-version system-serial-number system-uuid baseboard-manufacturer baseboard-product-name baseboard-version baseboard-serial-number baseboard-asset-tag chassis-manufacturer chassis-type chassis-version chassis-serial-number chassis-asset-tag processor-family processor-manufacturer processor-version processor-frequency"
                i=0
                IFS=$oIFS
                for t in $test; do
                    str="DMI String: $t\n"
                    v=$(dmidecode --string $t)
                    echo -e "$str   $v\n\n"
                    let i+=1
                    if [[ $i == 5 ]]; then
                        echo " * Press [Enter] to Proceed"
                        read tmp
                        i=0
                    fi
                done
                IFS=$'\n'
                wait_enter
                ;;
            *)
                echo "Invalid entry, try again"
                wait_enter
                ;;
        esac
        break
    done
done
IFS=$oIFS
